import tensorflow as tf
from tensorflow.keras.models import load_model
import streamlit as st
import numpy as np
from PIL import Image

# ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß
st.image("01.jpg", use_container_width=True)  # ‡πÉ‡∏ä‡πâ use_container_width ‡πÅ‡∏ó‡∏ô use_column_width
st.header('üçõ Image Classification Model')
st.markdown("""
<style>
    .main-header {
        font-size: 32px;
        color: #4CAF50;
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)

# ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á
st.subheader("‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ")

# ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π
menu_list = [
    'Khaoklukkapi (‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ñ‡∏•‡∏∏‡∏Å‡∏Å‡∏∞‡∏õ‡∏¥)', 'Fishcake (‡∏ó‡∏≠‡∏î‡∏°‡∏±‡∏ô)', 'Greencurry (‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô)', 'Kailoogkeay (‡πÑ‡∏Ç‡πà‡∏•‡∏π‡∏Å‡πÄ‡∏Ç‡∏¢)', 
    'Khaomokkai (‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏°‡∏Å‡πÑ‡∏Å‡πà)', 'Khoamunkai (‡∏Ç‡πâ‡∏≤‡∏ß‡∏°‡∏±‡∏ô‡πÑ‡∏Å‡πà)', 'Kungopwunsen (‡∏Å‡∏∏‡πâ‡∏á‡∏≠‡∏ö‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô)', 'Kungpao (‡∏Å‡∏∏‡πâ‡∏á‡πÄ‡∏ú‡∏≤)', 
    'Moosatae (‡∏´‡∏°‡∏π‡∏™‡∏∞‡πÄ‡∏ï‡πä‡∏∞)', 'PadThai (‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢)', 'Padkrapao (‡∏ú‡∏±‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏û‡∏£‡∏≤)', 'Padpukbung (‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å‡∏ö‡∏∏‡πâ‡∏á)', 
    'Palo (‡∏û‡∏∞‡πÇ‡∏•‡πâ)', 'Somtum (‡∏™‡πâ‡∏°‡∏ï‡∏≥)', 'Tomjued (‡∏ï‡πâ‡∏°‡∏à‡∏∑‡∏î)', 'Tomjuedmara (‡∏ï‡πâ‡∏°‡∏à‡∏∑‡∏î‡∏°‡∏∞‡∏•‡∏∞)', 
    'Tomkhakai (‡∏ï‡πâ‡∏°‡∏Ç‡πà‡∏≤‡πÑ‡∏Å‡πà)', 'Tomyumkung (‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á)'
]

# ‡∏à‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô HTML ‡∏ï‡∏≤‡∏£‡∏≤‡∏á
menu_table = """
<style>
    table {
        width: 100%;
        border-collapse: collapse;
        margin: 20px 0;
        font-size: 16px;
    }
    th, td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }
    th {
        background-color: #f4b41a;
        color: white;
    }
    tr:nth-child(even) {
        background-color: rgb(22, 178, 240);
    }
</style>
<table>
    <tr><th>Menu</th></tr>
""" + "".join(f"<tr><td>{menu}</td></tr>" for menu in menu_list) + "</table>"

st.markdown(menu_table, unsafe_allow_html=True)

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
model = load_model('Image_classify2.keras')

# ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
data_cat = ['Khaoklukkapi', 'fishcake', 'greencurry', 'kailoogkeay', 'khaomokkai', 'khoamunkai', 
            'kungopwunsen', 'kungpao', 'moosatae', 'padThai', 'padkrapao', 'padpukbung', 
            'palo', 'somtum', 'tomjued', 'tomjuedmara', 'tomkhakai', 'tomyumkung']

# ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
img_height = 224
img_width = 224

# ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π
menu_links = {
    "Khaoklukkapi": "https://www.wongnai.com/recipes/rice-seasoned-with-shrimp-paste-recipe",
    "fishcake": "https://www.wongnai.com/recipes/fish-cake",
    "greencurry": "https://www.wongnai.com/recipes/green-curry",
    "kailoogkeay": "https://www.wongnai.com/recipes/deep-fried-duck-egg-with-sweet-sour-sauce",
    "khaomokkai": "https://www.wongnai.com/recipes/khao-mok-gai",
    "khoamunkai": "https://www.wongnai.com/recipes/hainanese-chicken-rice",
    "kungopwunsen": "https://www.wongnai.com/recipes/shrimp-potted-with-vermicelli",
    "kungpao": "https://www.wongnai.com/recipes/ugc/e17dade0126a438ea3470adf31af8c2f",
    "moosatae": "https://www.wongnai.com/recipes/pork-satay",
    "padThai": "https://www.wongnai.com/recipes/thai-fried-noodles-with-shrimp",
    "padkrapao": "https://cooking.kapook.com/view246668.html",
    "padpukbung": "https://www.wongnai.com/recipes/ugc/638b2833769c4a9f9b92ddd1e530b807",
    "palo": "https://www.wongnai.com/recipes/ugc/816e86a9a705491e91606b71b1c8c665",
    "somtum": "https://www.wongnai.com/food-tips/somtum-series",
    "tomjued": "https://www.wongnai.com/recipes/ugc/c082fa555e704ef98dc825f73dafd46a",
    "tomjuedmara": "https://www.sanook.com/women/176917/",
    "tomkhakai": "https://www.wongnai.com/recipes/tom-khai-gai",
    "tomyumkung": "https://www.wongnai.com/recipes/ugc/06c21e83ed584ed4996a129af5c3231c",
}

# ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå...", type=["jpg", "jpeg", "png"])
camera_file = st.camera_input("‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á")

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
image_file = uploaded_file if uploaded_file is not None else camera_file

# ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
if image_file is not None:
    # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û
    image = Image.open(image_file)
    st.image(image, caption='Uploaded Image', use_container_width=True)  # ‡πÉ‡∏ä‡πâ use_container_width ‡πÅ‡∏ó‡∏ô use_column_width

    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û
    image = image.resize((img_height, img_width))
    img_arr = np.array(image)
    img_arr = np.expand_dims(img_arr, axis=0)

    # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
    predict = model.predict(img_arr)

    # ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    score = tf.nn.softmax(predict)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    predicted_class = data_cat[np.argmax(score)]

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    st.markdown(f'### ü•ò **Predicted Menu ( ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡∏Ñ‡∏∑‡∏≠ ) :** {predicted_class}')
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π
    if predicted_class in menu_links:
        menu_url = menu_links[predicted_class]
        st.markdown(f"[üîó ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π {predicted_class}]( {menu_url} )")
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ")
else:
    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
