import tensorflow as tf
from tensorflow.keras.models import load_model
import streamlit as st
import numpy as np
from PIL import Image

# =======================
# CSS ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á + ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏±‡∏î
# =======================
page_bg = """
<style>
[data-testid="stAppViewContainer"] {
    background-image: url("https://i.postimg.cc/c4TXtncG/fall-nature-background-with-leaves-picjumbo-com.jpg");
    background-size: cover;
    background-repeat: no-repeat;
    background-attachment: fixed;
    color: #222222;
}

[data-testid="stHeader"] {
    background: rgba(0,0,0,0);
}

[data-testid="stToolbar"] {
    right: 2rem;
}

.main-header {
    font-size: 32px;
    color: #222222;
    text-align: center;
}

/* ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° Browse file ‡πÅ‡∏•‡∏∞ Take photo */
[data-testid="stFileUploader"] button,
[data-testid="stCameraInput"] button {
    background: linear-gradient(90deg, #f48c06, #f4b41a) !important;
    color: white !important;
    font-weight: bold !important;
    border-radius: 10px !important;
    padding: 10px 20px !important;
    border: none !important;
    box-shadow: 0px 4px 8px rgba(0,0,0,0.2) !important;
    transition: 0.3s;
}

[data-testid="stFileUploader"] button:hover,
[data-testid="stCameraInput"] button:hover {
    background: linear-gradient(90deg, #f4a261, #e76f51) !important;
    transform: scale(1.05);
}

/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π */
table {
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
    font-size: 16px;
    font-family: 'Arial', sans-serif;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    border-radius: 10px;
    overflow: hidden;
}

th, td {
    padding: 12px 15px;
    text-align: left;
    color: #222222;
}

th {
    background: linear-gradient(90deg, #f4b41a, #f48c06);
    color: white;
    font-size: 18px;
}

tr:nth-child(even) {
    background-color: rgba(255,255,255,0.8);
}

tr:nth-child(odd) {
    background-color: rgba(255,255,255,0.6);
}

tr:hover {
    background-color: rgba(208,240,253,0.8);
    transition: 0.3s;
}

td {
    border-bottom: 1px solid #ddd;
}
</style>
"""
st.markdown(page_bg, unsafe_allow_html=True)

# =======================
# ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
# =======================
st.image("01.jpg", use_container_width=True)
st.header('üçõ Image Classification Model')

# =======================
# ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ
# =======================
st.subheader("‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ")
menu_list = [
    'Khaoklukkapi (‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ñ‡∏•‡∏∏‡∏Å‡∏Å‡∏∞‡∏õ‡∏¥)', 'Fish Cake (‡∏ó‡∏≠‡∏î‡∏°‡∏±‡∏ô‡∏õ‡∏•‡∏≤)', 'Green Curry (‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô)', 'Kai Look Keaw (‡πÑ‡∏Ç‡πà‡∏•‡∏π‡∏Å‡πÄ‡∏Ç‡∏¢)', 
    'Khao Mok Gai (‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏°‡∏Å‡πÑ‡∏Å‡πà)', 'Khao Mun Gai (‡∏Ç‡πâ‡∏≤‡∏ß‡∏°‡∏±‡∏ô‡πÑ‡∏Å‡πà)', 'Kung Ob Wunsen (‡∏Å‡∏∏‡πâ‡∏á‡∏≠‡∏ö‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô)', 'Kung Pao (‡∏Å‡∏∏‡πâ‡∏á‡πÄ‡∏ú‡∏≤)', 
    'Moo Satay (‡∏´‡∏°‡∏π‡∏™‡∏∞‡πÄ‡∏ï‡πä‡∏∞)', 'Pad Thai (‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢)', 'Pad Krapao (‡∏ú‡∏±‡∏î‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤)', 'Pad Pak Bung (‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å‡∏ö‡∏∏‡πâ‡∏á)', 
    'Palo (‡∏û‡∏∞‡πÇ‡∏•‡πâ)', 'Som Tum (‡∏™‡πâ‡∏°‡∏ï‡∏≥)', 'Tom Jued (‡∏ï‡πâ‡∏°‡∏à‡∏∑‡∏î)', 'Tom Jued Mara (‡∏ï‡πâ‡∏°‡∏à‡∏∑‡∏î‡∏°‡∏∞‡∏£‡∏∞)', 
    'Tom Kha Kai (‡∏ï‡πâ‡∏°‡∏Ç‡πà‡∏≤‡πÑ‡∏Å‡πà)', 'Tom Yum Kung (‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á)'
]

menu_table = """
<table>
<tr><th>English Name</th><th>Thai Name</th></tr>
""" + "".join(f"<tr><td>{menu.split(' (')[0]}</td><td>{menu.split(' (')[1].replace(')','')}</td></tr>" for menu in menu_list) + "</table>"

st.markdown(menu_table, unsafe_allow_html=True)

# =======================
# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
# =======================
model = load_model('thai_food_model.keras')
data_cat = [
    'khaoklukkapi', 'fishcake', 'greencurry', 'khailookkeaw', 'khaomokkai', 'khaomunkai',
    'kungobwunsen', 'kungpao', 'moosatay', 'padthai', 'padkrapao', 'padpakbung',
    'palo', 'somtum', 'tomjude', 'tomjudmara', 'tomkhakai', 'tomyumkung'
]
img_height = 224
img_width = 224

# =======================
# ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π
# =======================
menu_links = {
    "khaoklukkapi": ("‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ñ‡∏•‡∏∏‡∏Å‡∏Å‡∏∞‡∏õ‡∏¥", "https://projectclassification.com/%e0%b8%82%e0%b9%89%e0%b8%b2%e0%b8%a7%e0%b8%84%e0%b8%a5%e0%b8%b8%e0%b8%81%e0%b8%81%e0%b8%b0%e0%b8%9b%e0%b8%b4-rice-seasoned-with-shrimp-paste-khaoklukkapi/"),
    "fishcake": ("‡∏ó‡∏≠‡∏î‡∏°‡∏±‡∏ô‡∏õ‡∏•‡∏≤", "https://projectclassification.com/%e0%b8%97%e0%b8%ad%e0%b8%94%e0%b8%a1%e0%b8%b1%e0%b8%99%e0%b8%9b%e0%b8%a5%e0%b8%b2-thai-fish-cake-fishcake/"),
    "greencurry": ("‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô", "https://projectclassification.com/%e0%b9%81%e0%b8%81%e0%b8%87%e0%b9%80%e0%b8%82%e0%b8%b5%e0%b8%a2%e0%b8%a7%e0%b8%ab%e0%b8%a7%e0%b8%b2%e0%b8%99-green-curry-greencurry-2/"),
    "khailookkeaw": ("‡πÑ‡∏Ç‡πà‡∏•‡∏π‡∏Å‡πÄ‡∏Ç‡∏¢", "https://projectclassification.com/%e0%b9%84%e0%b8%82%e0%b9%88%e0%b8%a5%e0%b8%b9%e0%b8%81%e0%b9%80%e0%b8%82%e0%b8%a2-son-in-law-eggs-kailoogkeay/"),
    "khaomokkai": ("‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏°‡∏Å‡πÑ‡∏Å‡πà", "https://projectclassification.com/%e0%b8%82%e0%b9%89%e0%b8%b2%e0%b8%a7%e0%b8%ab%e0%b8%a1%e0%b8%81%e0%b9%84%e0%b8%81%e0%b9%88-thai-chicken-biryani-khaomokkai/"),
    "khaomunkai": ("‡∏Ç‡πâ‡∏≤‡∏ß‡∏°‡∏±‡∏ô‡πÑ‡∏Å‡πà", "https://projectclassification.com/%e0%b8%82%e0%b9%89%e0%b8%b2%e0%b8%a7%e0%b8%a1%e0%b8%b1%e0%b8%99%e0%b9%84%e0%b8%81%e0%b9%88-hainanese-chicken-rice-khoamunkai/"),
    "kungobwunsen": ("‡∏Å‡∏∏‡πâ‡∏á‡∏≠‡∏ö‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô", "https://projectclassification.com/%e0%b8%81%e0%b8%b8%e0%b9%89%e0%b8%87%e0%b8%ad%e0%b8%9a%e0%b8%a7%e0%b8%b8%e0%b9%89%e0%b8%99%e0%b9%80%e0%b8%aa%e0%b9%89%e0%b8%99-shrimp-potted-with-vermicelli-kungopwunsen/"),
    "kungpao": ("‡∏Å‡∏∏‡πâ‡∏á‡πÄ‡∏ú‡∏≤", "https://projectclassification.com/%e0%b8%81%e0%b8%b8%e0%b9%89%e0%b8%87%e0%b9%80%e0%b8%9c%e0%b8%b2-grilled-river-prawns-kungpao/"),
    "moosatay": ("‡∏´‡∏°‡∏π‡∏™‡∏∞‡πÄ‡∏ï‡πä‡∏∞", "https://projectclassification.com/%e0%b8%ab%e0%b8%a1%e0%b8%b9%e0%b8%aa%e0%b8%b0%e0%b9%80%e0%b8%95%e0%b9%8a%e0%b8%b0-pork-satay-moosatae/"),
    "padthai": ("‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢", "https://projectclassification.com/%e0%b8%9c%e0%b8%b1%e0%b8%94%e0%b9%84%e0%b8%97%e0%b8%a2-pad-thai-padthai/"),
    "padkrapao": ("‡∏ú‡∏±‡∏î‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤", "https://projectclassification.com/%e0%b8%9c%e0%b8%b1%e0%b8%94%e0%b8%81%e0%b8%b0%e0%b9%80%e0%b8%9e%e0%b8%a3%e0%b8%b2-stir-fried-basil-padkrapao/"),
    "padpakbung": ("‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å‡∏ö‡∏∏‡πâ‡∏á", "https://projectclassification.com/%e0%b8%9c%e0%b8%b1%e0%b8%94%e0%b8%9c%e0%b8%b1%e0%b8%81%e0%b8%9a%e0%b8%b8%e0%b9%89%e0%b8%87%e0%b9%84%e0%b8%9f%e0%b9%81%e0%b8%94%e0%b8%87-stir-fried-morning-glory-padpukbung/"),
    "palo": ("‡∏û‡∏∞‡πÇ‡∏•‡πâ", "https://projectclassification.com/%e0%b8%9e%e0%b8%b0%e0%b9%82%e0%b8%a5%e0%b9%89-five-spice-egg-and-pork-stew-palo/"),
    "somtum": ("‡∏™‡πâ‡∏°‡∏ï‡∏≥", "https://projectclassification.com/%e0%b8%aa%e0%b9%89%e0%b8%a1%e0%b8%95%e0%b8%b3-papaya-salad-somtum/"),
    "tomjude": ("‡∏ï‡πâ‡∏°‡∏à‡∏∑‡∏î", "https://projectclassification.com/%e0%b8%95%e0%b9%89%e0%b8%a1%e0%b8%88%e0%b8%b7%e0%b8%94-clear-soup-tomjued/"),
    "tomjudmara": ("‡∏ï‡πâ‡∏°‡∏à‡∏∑‡∏î‡∏°‡∏∞‡∏£‡∏∞", "https://projectclassification.com/%e0%b8%95%e0%b9%89%e0%b8%a1%e0%b8%88%e0%b8%b7%e0%b8%94%e0%b8%a1%e0%b8%b0%e0%b8%a3%e0%b8%b0-bitter-melon-soup-tomjuedmara/"),
    "tomkhakai": ("‡∏ï‡πâ‡∏°‡∏Ç‡πà‡∏≤‡πÑ‡∏Å‡πà", "https://projectclassification.com/%e0%b8%95%e0%b9%89%e0%b8%a1%e0%b8%82%e0%b9%88%e0%b8%b2%e0%b9%84%e0%b8%81%e0%b9%88-galangal-chicken-soup-tomkhakai/"),
    "tomyumkung": ("‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á", "https://projectclassification.com/%e0%b8%95%e0%b9%89%e0%b8%a1%e0%b8%a2%e0%b8%b3%e0%b8%81%e0%b8%b8%e0%b9%89%e0%b8%87-tom-yum-goong-tomyumkung/"),
}

# =======================
# ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
# =======================
uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå...", type=["jpg", "jpeg", "png"])
camera_file = st.camera_input("‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á")
image_file = uploaded_file if uploaded_file is not None else camera_file

# =======================
# ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
# =======================
if image_file is not None:
    image = Image.open(image_file)
    st.image(image, caption='Uploaded Image', use_container_width=True)

    image = image.resize((img_height, img_width))
    img_arr = np.expand_dims(np.array(image), axis=0)

    predict = model.predict(img_arr)
    score = tf.nn.softmax(predict)
    predicted_class = data_cat[np.argmax(score)]

    if predicted_class in menu_links:
        thai_name, url = menu_links[predicted_class]
        st.markdown(f'### ü•ò **Predicted Menu (‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢):** {predicted_class} ({thai_name})')
        st.markdown(f"[üîó ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π {thai_name}]({url})")
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ")
else:
    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
